/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -p OfonoVoiceCallManager phone_hfp_annotated.xml org.ofono.VoiceCallManager
 *
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef OFONOVOICECALLMANAGER_H
#define OFONOVOICECALLMANAGER_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

typedef struct OfonoCall_Struct
{
    QDBusObjectPath objectPath;
    QMap<QString, QVariant> properties;
} OfonoCall;

typedef QList<OfonoCall> CallList;

Q_DECLARE_METATYPE(OfonoCall);
Q_DECLARE_METATYPE(CallList);

// Marshall the OfonoCall data into a D-Bus argument
QDBusArgument &operator<<(QDBusArgument &argument, const OfonoCall &call);
// Retrieve the OfonoCall data from the D-Bus argument
const QDBusArgument &operator>>(const QDBusArgument &argument, OfonoCall &call);

/*
 * Proxy class for interface org.ofono.VoiceCallManager
 */
class OrgOfonoVoiceCallManagerInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.ofono.VoiceCallManager"; }

public:
    OrgOfonoVoiceCallManagerInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~OrgOfonoVoiceCallManagerInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QList<QDBusObjectPath> > CreateMultiparty()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("CreateMultiparty"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> Dial(const QString &number, const QString &hide_callerid)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(number) << QVariant::fromValue(hide_callerid);
        return asyncCallWithArgumentList(QStringLiteral("Dial"), argumentList);
    }

    inline QDBusPendingReply<> DialLast()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("DialLast"), argumentList);
    }

    inline QDBusPendingReply<> DialMemory(uint memory_location)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(memory_location);
        return asyncCallWithArgumentList(QStringLiteral("DialMemory"), argumentList);
    }

    inline QDBusPendingReply<CallList> GetCalls()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetCalls"), argumentList);
    }

    inline QDBusPendingReply<QVariantMap> GetProperties()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetProperties"), argumentList);
    }

    inline QDBusPendingReply<> HangupAll()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("HangupAll"), argumentList);
    }

    inline QDBusPendingReply<> HangupMultiparty()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("HangupMultiparty"), argumentList);
    }

    inline QDBusPendingReply<> HoldAndAnswer()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("HoldAndAnswer"), argumentList);
    }

    inline QDBusPendingReply<QList<QDBusObjectPath> > PrivateChat(const QDBusObjectPath &call)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(call);
        return asyncCallWithArgumentList(QStringLiteral("PrivateChat"), argumentList);
    }

    inline QDBusPendingReply<> ReleaseAndAnswer()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("ReleaseAndAnswer"), argumentList);
    }

    inline QDBusPendingReply<> ReleaseAndSwap()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("ReleaseAndSwap"), argumentList);
    }

    inline QDBusPendingReply<> SendTones(const QString &SendTones)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(SendTones);
        return asyncCallWithArgumentList(QStringLiteral("SendTones"), argumentList);
    }

    inline QDBusPendingReply<> SwapCalls()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("SwapCalls"), argumentList);
    }

    inline QDBusPendingReply<> Transfer()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Transfer"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void BarringActive(const QString &type);
    void CallAdded(const QDBusObjectPath &path, const QVariantMap &properties);
    void CallRemoved(const QDBusObjectPath &path);
    void Forwarded(const QString &type);
    void PropertyChanged(const QString &name, const QDBusVariant &value);
};

namespace org {
  namespace ofono {
    typedef ::OrgOfonoVoiceCallManagerInterface VoiceCallManager;
  }
}
#endif
