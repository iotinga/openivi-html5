/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -p OfonoVoiceCall call_annotated.xml org.ofono.VoiceCall
 *
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef OFONOVOICECALL_H
#define OFONOVOICECALL_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.ofono.VoiceCall
 */
class OrgOfonoVoiceCallInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.ofono.VoiceCall"; }

public:
    OrgOfonoVoiceCallInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~OrgOfonoVoiceCallInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> Answer()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Answer"), argumentList);
    }

    inline QDBusPendingReply<> Deflect(const QString &number)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(number);
        return asyncCallWithArgumentList(QStringLiteral("Deflect"), argumentList);
    }

    inline QDBusPendingReply<QVariantMap> GetProperties()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetProperties"), argumentList);
    }

    inline QDBusPendingReply<> Hangup()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Hangup"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void DisconnectReason(const QString &reason);
    void PropertyChanged(const QString &name, const QDBusVariant &value);
};

namespace org {
  namespace ofono {
    typedef ::OrgOfonoVoiceCallInterface VoiceCall;
  }
}
#endif
